import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
	id 'org.springframework.boot' version '2.1.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'com.bmuschko.docker-remote-api' version '4.8.1'
	id 'java'
	id 'eclipse'
	id 'application'
}


apply plugin: 'application'
mainClassName = 'com.cargas.amlcargas.AmlCargasApplication'

group = 'com.cargas.amlcargas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile "io.springfox:springfox-swagger2:2.9.2"
	compile "io.springfox:springfox-swagger-ui:2.9.2"
	compile 'commons-io:commons-io:2.4'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'com.microsoft.sqlserver:mssql-jdbc'
  //compile group: 'com.bmuschko.docker-remote-api', name: 'com.bmuschko.docker-remote-api.gradle.plugin', version: '4.8.0', ext: 'pom'
}

task createDockerfile(type: Dockerfile, dependsOn: assemble)  {
	println "CREANDO DOCKERFILE ..."
	destFile = project.file('build/libs/Dockerfile')
	println "destFile --> ${destFile.get().asFile.parentFile}"

	from('openjdk:8u181-jre-slim-stretch')
	runCommand("mkdir -p /opt/DONDE/")
	copyFile ("aml-cargas*.jar", '/opt/app.jar')

	exposePort (8080)
	entryPoint("java", "-Djava.awt.headless=true", "-Xms4096m", "-Xmx4096m", "-jar", "/opt/app.jar")
}

task buildImage('type': DockerBuildImage, dependsOn: createDockerfile){
	println "CREANDO IMAGEN ..."

	inputDir.set(project.layout.buildDirectory.dir('libs'))
	println "inputDir ---> ${inputDir}"
	tags.add('aml/cargas-donde:1.0')
}

task deleteImage('type': DockerRemoveImage){
	imageId.set('aml/cargas-donde:1.0')
}

task deleteAndBuildImage(dependsOn: deleteImage ){
	println 'Delete and build Image Docker'
	finalizedBy buildImage
}

task createContainer(type: DockerCreateContainer) {
  println 'createContainer'
  dependsOn buildImage
	targetImageId buildImage.getImageId()
	portBindings = ['8071:8080']
	autoRemove = false
	containerName = 'aml-cargas-donde'
}

task startContainer(type: DockerStartContainer) {
  println 'start container'
	dependsOn createContainer
	targetContainerId createContainer.getContainerId()
}

task stopContainer(type: DockerStopContainer) {
	targetContainerId 'aml-cargas-donde'
}
